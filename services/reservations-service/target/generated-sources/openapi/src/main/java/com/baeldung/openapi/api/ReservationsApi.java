/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.baeldung.openapi.api;

import com.baeldung.openapi.model.Reservation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-12T20:14:59.524943600+02:00[Africa/Johannesburg]")
@Validated
@Api(value = "reservations", description = "the reservations API")
public interface ReservationsApi {

    default ReservationsApiDelegate getDelegate() {
        return new ReservationsApiDelegate() {};
    }

    /**
     * POST /reservations : Add a new reservation
     *
     * @param reservation  (required)
     * @return Reservation added successfully (status code 201)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "Add a new reservation", nickname = "addReservation", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Reservation added successfully"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/reservations",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addReservation(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Reservation reservation) {
        return getDelegate().addReservation(reservation);
    }


    /**
     * GET /reservations : Get a list of reservations
     *
     * @return Successful response (status code 200)
     */
    @ApiOperation(value = "Get a list of reservations", nickname = "getAllReservations", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reservations",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getAllReservations() {
        return getDelegate().getAllReservations();
    }


    /**
     * GET /reservations/{reservationId} : Get reservation details by ID
     *
     * @param reservationId ID of the reservation (required)
     * @return Successful response (status code 200)
     */
    @ApiOperation(value = "Get reservation details by ID", nickname = "getReservationById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reservations/{reservationId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getReservationById(@ApiParam(value = "ID of the reservation",required=true) @PathVariable("reservationId") Integer reservationId) {
        return getDelegate().getReservationById(reservationId);
    }


    /**
     * DELETE /reservations/{reservationId} : Delete reservation by ID
     *
     * @param reservationId ID of the reservation (required)
     * @return Reservation deleted successfully (status code 204)
     *         or Reservation not found (status code 404)
     */
    @ApiOperation(value = "Delete reservation by ID", nickname = "removeReservation", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Reservation deleted successfully"),
        @ApiResponse(code = 404, message = "Reservation not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/reservations/{reservationId}"
    )
    default ResponseEntity<Void> removeReservation(@ApiParam(value = "ID of the reservation",required=true) @PathVariable("reservationId") Integer reservationId) {
        return getDelegate().removeReservation(reservationId);
    }


    /**
     * PUT /reservations/{reservationId} : Update reservation details by ID
     *
     * @param reservationId ID of the reservation (required)
     * @param reservation  (required)
     * @return Reservation updated successfully (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "Update reservation details by ID", nickname = "updateReservation", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reservation updated successfully"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/reservations/{reservationId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateReservation(@ApiParam(value = "ID of the reservation",required=true) @PathVariable("reservationId") Integer reservationId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Reservation reservation) {
        return getDelegate().updateReservation(reservationId, reservation);
    }

}
