/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.baeldung.openapi.api;

import com.baeldung.openapi.model.Car;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-12T02:42:47.824164200+02:00[Africa/Johannesburg]")
@Validated
@Api(value = "cars", description = "the cars API")
public interface CarsApi {

    default CarsApiDelegate getDelegate() {
        return new CarsApiDelegate() {};
    }

    /**
     * POST /cars : Add a new car
     *
     * @param car  (required)
     * @return Car added successfully (status code 200)
     *         or Bad request. Check the request body for valid data. (status code 500)
     */
    @ApiOperation(value = "Add a new car", nickname = "addCar", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Car added successfully"),
        @ApiResponse(code = 500, message = "Bad request. Check the request body for valid data.") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cars",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addCar(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Car car) {
        return getDelegate().addCar(car);
    }


    /**
     * GET /cars : Get a list of cars
     *
     * @return Successful response (status code 200)
     */
    @ApiOperation(value = "Get a list of cars", nickname = "getAllCars", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cars",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getAllCars() {
        return getDelegate().getAllCars();
    }


    /**
     * GET /cars/{carId} : Get car details by ID
     *
     * @param carId ID of the car (required)
     * @return Successful response (status code 200)
     */
    @ApiOperation(value = "Get car details by ID", nickname = "getCarById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cars/{carId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getCarById(@ApiParam(value = "ID of the car",required=true) @PathVariable("carId") Integer carId) {
        return getDelegate().getCarById(carId);
    }


    /**
     * DELETE /cars/{carId} : Delete car by ID
     *
     * @param carId ID of the car (required)
     * @return Car deleted successfully (status code 200)
     *         or Car not found (status code 404)
     */
    @ApiOperation(value = "Delete car by ID", nickname = "removeCar", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Car deleted successfully"),
        @ApiResponse(code = 404, message = "Car not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/cars/{carId}"
    )
    default ResponseEntity<Void> removeCar(@ApiParam(value = "ID of the car",required=true) @PathVariable("carId") Integer carId) {
        return getDelegate().removeCar(carId);
    }


    /**
     * PUT /cars/{carId} : Update a car by ID
     *
     * @param carId ID of the car to update (required)
     * @param car  (required)
     * @return Car updated successfully (status code 200)
     *         or Bad request. Check the request body for valid data. (status code 500)
     */
    @ApiOperation(value = "Update a car by ID", nickname = "updateCar", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Car updated successfully"),
        @ApiResponse(code = 500, message = "Bad request. Check the request body for valid data.") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/cars/{carId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateCar(@ApiParam(value = "ID of the car to update",required=true) @PathVariable("carId") Integer carId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Car car) {
        return getDelegate().updateCar(carId, car);
    }

}
