/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.baeldung.openapi.api;

import com.baeldung.openapi.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-12T04:00:55.260999500+02:00[Africa/Johannesburg]")
@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default UsersApiDelegate getDelegate() {
        return new UsersApiDelegate() {};
    }

    /**
     * POST /users : Add a new user
     *
     * @param user  (required)
     * @return User added successfully (status code 201)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "Add a new user", nickname = "addUser", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User added successfully"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User user) {
        return getDelegate().addUser(user);
    }


    /**
     * DELETE /users/{userId} : Delete user by ID
     * Deletes a user from the system. Note that this is not reversible!
     *
     * @param userId ID of the user (required)
     * @return User deleted successfully (status code 204)
     *         or User not found (status code 404)
     */
    @ApiOperation(value = "Delete user by ID", nickname = "deleteUser", notes = "Deletes a user from the system. Note that this is not reversible!", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "User deleted successfully"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}"
    )
    default ResponseEntity<Void> deleteUser(@ApiParam(value = "ID of the user",required=true) @PathVariable("userId") Integer userId) {
        return getDelegate().deleteUser(userId);
    }


    /**
     * GET /users/{userId} : Get user details by ID
     * Returns detailed information about a specific user.
     *
     * @param userId ID of the user (required)
     * @return Successful response (status code 200)
     */
    @ApiOperation(value = "Get user details by ID", nickname = "getUserById", notes = "Returns detailed information about a specific user.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getUserById(@ApiParam(value = "ID of the user",required=true) @PathVariable("userId") Integer userId) {
        return getDelegate().getUserById(userId);
    }


    /**
     * GET /users : Get a list of users
     *
     * @return Successful response (status code 200)
     */
    @ApiOperation(value = "Get a list of users", nickname = "getUsers", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getUsers() {
        return getDelegate().getUsers();
    }


    /**
     * PUT /users/{userId} : Update user details by ID
     * Updates an existing user with new data.
     *
     * @param userId ID of the user (required)
     * @param user  (required)
     * @return User updated successfully (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "Update user details by ID", nickname = "updateUser", notes = "Updates an existing user with new data.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User updated successfully"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateUser(@ApiParam(value = "ID of the user",required=true) @PathVariable("userId") Integer userId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody User user) {
        return getDelegate().updateUser(userId, user);
    }

}
